---
- name: Ensure adguardhome group exists.
  ansible.builtin.group:
    name: "{{ adguardhome_group }}"
    state: present
    system: true
  when: adguardhome_group != 'root'

- name: Ensure adguardhome user exists.
  ansible.builtin.user:
    name: "{{ adguardhome_user }}"
    group: "{{ adguardhome_group }}"
    home: "{{ adguardhome_home_dir }}"
    shell: /usr/sbin/nologin
    system: true
  when: adguardhome_user != 'root'

- name: Check if AdGuardHome is already installed.
  ansible.builtin.command:
    cmd: "{{ adguardhome_bin_dir }}/AdGuardHome --version"
  register: __adguardhome_version_result
  ignore_errors: true
  changed_when: false

# The unarchive module uses urllib3, and the way that is used in ansible,
# prevents it from using SOCKS5 proxies. But we do need that, because
# github.com does not support IPv6, and the SSH tunnel we use to work
# around that, is SOCKS5. So, we manually download the archive with curl,
# which is able to use a SOCKS5 proxy.
- name: Fetch release information from API
  ansible.builtin.command:
    cmd: "curl {{ token }} --fail-with-body --silent {{ adguardhome_releases }}"
  register: releases_json
  vars:
    # https://github.com/settings/personal-access-tokens
    token: |
      {{ '--header "Authorization: Bearer ' ~ ghtok ~ '"' if ghtok is defined else '' }}
  when: __adguardhome_version_result is failed
        or __adguardhome_version_result.stdout is not search(adguardhome_version)
  check_mode: false

- name: Set release variables
  ansible.builtin.set_fact:
    _version: "{{ (releases_json.stdout|from_json).tag_name  }}"
    _download_url: "{{ ((releases_json.stdout|from_json).assets|selectattr('name','==','AdGuardHome_linux_'~_arch_map[ansible_architecture]~'.tar.gz'))[0].browser_download_url }}"
  when: __adguardhome_version_result is failed
        or __adguardhome_version_result.stdout is not search(adguardhome_version)
  check_mode: false

- name: Set tarball path
  ansible.builtin.set_fact:
    _tarball: "/var/cache/curl/aghome-{{ _version }}.tar.gz"
  when: __adguardhome_version_result is failed
        or __adguardhome_version_result.stdout is not search(adguardhome_version)

- name: Ensure archive has been downloaded from Github
  ansible.builtin.command:
    cmd: >-
      curl
      --location
      --remove-on-error
      --create-dirs
      --output {{ _tarball }}
      {{ _download_url }}
    creates: "{{ _tarball }}"
  changed_when: false
  when: __adguardhome_version_result is failed
        or __adguardhome_version_result.stdout is not search(adguardhome_version)

- name: Install AdGuardHome.
  ansible.builtin.unarchive:
    src: "{{ _tarball }}"
    dest: /usr/local/bin/
    remote_src: true
    include:
      - ./AdGuardHome/AdGuardHome
    extra_opts:
      - --strip-components=2
    mode: "0755"
  when: __adguardhome_version_result is failed
        or __adguardhome_version_result.stdout is not search(adguardhome_version)

- name: Ensure AdGuardHome data directory exists.
  ansible.builtin.file:
    path: "{{ adguardhome_data_dir }}"
    owner: "{{ adguardhome_user }}"
    group: "{{ adguardhome_group }}"
    state: directory
    mode: "0700"

- name: Ensure AdGuardHome config directory exists.
  ansible.builtin.file:
    path: "{{ adguardhome_config_dir }}"
    owner: "{{ adguardhome_user }}"
    group: "{{ adguardhome_group }}"
    state: directory
    mode: "0755"

- name: Install systemd service
  ansible.builtin.template:
    src: systemd.service.j2
    dest: "/etc/systemd/system/{{ adguardhome_daemon }}.service"
    mode: "0664"
  register: adguardhome_systemd_unit
  notify:
    - reload systemd daemon
    - restart adguardhome

- name: Ensure service is enabled
  ansible.builtin.service:
    name: "{{ adguardhome_daemon }}"
    enabled: yes
